/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
 ListNode*getKthNode(ListNode*temp,int k){
    k-=1;
    while(temp!=NULL && k>0){
        k--;
        temp=temp->next;
    }
    return temp;
 }

ListNode*reverse(ListNode*head){
    ListNode*curr=head;
    ListNode*prev=NULL;
    ListNode*next=NULL;
    while(curr!=NULL){
        next=curr->next;
        curr->next=prev;
        prev=curr;
        curr=next;
    }
    return prev;
}
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
       ListNode*temp=head;
       ListNode*prevNode=NULL;
       while(temp!=NULL){
        ListNode*KthNode=getKthNode(temp,k);
        if(KthNode==NULL){
            if(prevNode){
                prevNode->next=temp;
            }
            break;
        }
        ListNode*nextNode=KthNode->next;
        KthNode->next=NULL;
        reverse(temp);
        if(head==temp){
            head=KthNode;
        }else{
            prevNode->next=KthNode;
        }
        prevNode=temp;
        temp=nextNode;
       } 
       return head;
    }
};